generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  username       String           @db.VarChar(120)
  password       String           @db.VarChar(120)
  id             Int              @id @default(autoincrement())
  role           Int
  NonCompliances NonCompliances[]
  Records        Records[]
}

model Libraries {
  id             Int              @id @default(autoincrement())
  code           String           @db.VarChar(50)
  name           String           @db.VarChar(250)
  NonCompliances NonCompliances[]
  Records        Records[]
}

model Records {
  id             Int              @id @default(autoincrement())
  number         Int
  libraryId      Int
  authorName     String?          @db.VarChar(250)
  formatId       Int
  recordType     RecordType?
  addedById      Int
  dateAdded      DateTime         @db.Date
  found          Founds
  Users          Users            @relation(fields: [addedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Formats        Formats          @relation(fields: [formatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Records_typeId_fkey")
  Libraries      Libraries        @relation(fields: [libraryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  NonCompliances NonCompliances[]
}

model Tags {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  NonCompliances NonCompliances[]
}

model NonCompliances {
  id          Int       @id(map: "NonCompliance_pkey") @default(autoincrement())
  recordId    Int
  userId      Int
  language    String    @db.Char(3)
  libraryId   Int
  formatId    Int
  tagId       Int
  description String
  group       NCGroup
  dateAdded   DateTime  @db.Date
  Formats     Formats   @relation(fields: [formatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "NonCompliance_recordTypeId_fkey")
  Libraries   Libraries @relation(fields: [libraryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "NonCompliance_libraryId_fkey")
  Records     Records   @relation(fields: [recordId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "NonCompliance_recordId_fkey")
  Tags        Tags      @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "NonCompliance_tagId_fkey")
  Users       Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "NonCompliance_userId_fkey")
}

model Formats {
  id             Int              @id(map: "RecordTypes_pkey") @default(autoincrement())
  name           String           @db.VarChar(50)
  NonCompliances NonCompliances[]
  Records        Records[]
}

enum Roles {
  Readonly
  User
  Admin
}

enum RecordType {
  Nuovo
  Modificato
  Copia
  Bonificato
}

enum NCGroup {
  Distrazione
  Ortografia
  MancataFormazione
}

enum Founds {
  Moderno
  Pregio
  Antico
}
